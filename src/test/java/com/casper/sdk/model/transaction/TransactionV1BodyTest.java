package com.casper.sdk.model.transaction;

import com.casper.sdk.model.clvalue.CLValuePublicKey;
import com.casper.sdk.model.clvalue.CLValueU512;
import com.casper.sdk.model.clvalue.serde.Target;
import com.casper.sdk.model.deploy.NamedArg;
import com.casper.sdk.model.key.PublicKey;
import com.casper.sdk.model.transaction.entrypoint.DelegateEntryPoint;
import com.casper.sdk.model.transaction.scheduling.Standard;
import com.casper.sdk.model.transaction.target.Native;
import com.syntifi.crypto.key.encdec.Hex;
import dev.oak3.sbs4j.DeserializerBuffer;
import dev.oak3.sbs4j.SerializerBuffer;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.List;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;

/**
 * @author ian@meywood.com
 */
class TransactionV1BodyTest {

    @Test
    void transactionV1BodyToBytes() throws Exception {

        byte[] expectedBytes = {
                0x3, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x0,
                0x0, 0x0, 0x2, 0x2, 0x67, (byte) 0xb2, 0x1, 0x33, (byte) 0x97, 0x2b, (byte) 0xee, 0x79, (byte) 0x85,
                0x17, (byte) 0xaa, (byte) 0xc9, (byte) 0xa8, 0x62, 0x64, (byte) 0xda, 0x2f, 0x57, 0x73, (byte) 0xe0, 0x65,
                0x12, (byte) 0xe9, 0xf, 0x39, 0x56, (byte) 0x95, 0x57, 0x2, 0x71, (byte) 0xdf, 0x45, 0x16, 0x9, 0x0, 0x0,
                0x0, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x21, 0x0, 0x0, 0x0, 0x1, 0xd, (byte) 0xa1,
                (byte) 0xda, 0x43, (byte) 0xb1, (byte) 0xed, (byte) 0xc6, (byte) 0xac, 0x71, 0x36, (byte) 0xe4, (byte) 0x97,
                0x55, 0xa, 0x7f, (byte) 0x99, 0x5b, (byte) 0xa4, 0x77, (byte) 0xd5, 0x30, 0x41, (byte) 0x9e, 0x2a, 0x55,
                (byte) 0xe4, 0xb, (byte) 0x8b, 0x2f, (byte) 0x88, (byte) 0xd7, 0x6d, 0x16, 0x6, 0x0, 0x0, 0x0, 0x61, 0x6d,
                0x6f, 0x75, 0x6e, 0x74, 0x9, 0x0, 0x0, 0x0, 0x8, 0x4d, (byte) 0xf7, (byte) 0xeb, (byte) 0x8a, (byte) 0xe9,
                0x26, (byte) 0x8a, (byte) 0x93, 0x8, 0x0, 0x4, 0x1, 0x0
        };
        byte[] delegator = {
                0x2, 0x2, 0x67, (byte) 0xb2, 0x1, 0x33, (byte) 0x97, 0x2b, (byte) 0xee, 0x79, (byte) 0x85, 0x17, (byte) 0xaa,
                (byte) 0xc9, (byte) 0xa8, 0x62, 0x64, (byte) 0xda, 0x2f, 0x57, 0x73, (byte) 0xe0, 0x65, 0x12,
                (byte) 0xe9, 0xf, 0x39, 0x56, (byte) 0x95, 0x57, 0x2, 0x71, (byte) 0xdf, 0x45
        };

        byte[] validator = {
                0x1, 0xd, (byte) 0xa1, (byte) 0xda, 0x43, (byte) 0xb1, (byte) 0xed, (byte) 0xc6, (byte) 0xac, 0x71,
                0x36, (byte) 0xe4, (byte) 0x97, 0x55, 0xa, 0x7f, (byte) 0x99, 0x5b, (byte) 0xa4, 0x77, (byte) 0xd5,
                0x30, 0x41, (byte) 0x9e, 0x2a, 0x55, (byte) 0xe4, 0xb, (byte) 0x8b, 0x2f, (byte) 0x88, (byte) 0xd7, 0x6d
        };


        byte[] amount = {0x8, 0x4d, (byte) 0xf7, (byte) 0xeb, (byte) 0x8a, (byte) 0xe9, 0x26, (byte) 0x8a, (byte) 0x93};

        final List<NamedArg<?>> args = Arrays.asList(
                new NamedArg<>("delegator", new CLValuePublicKey(PublicKey.fromBytes(delegator))),
                new NamedArg<>("validator", new CLValuePublicKey(PublicKey.fromBytes(validator))),
                new NamedArg<>("amount", new CLValueU512(new DeserializerBuffer(amount).readU512()))

        );

        final TransactionV1Body transactionV1Body = TransactionV1Body.builder()
                .args(args)
                .target(new Native())
                .entryPoint(new DelegateEntryPoint())
                .transactionCategory(TransactionCategory.AUCTION)
                .scheduling(new Standard())
                .build();

        final SerializerBuffer buf = new SerializerBuffer();
        transactionV1Body.serialize(buf, Target.BYTE);
        final byte[] actual = buf.toByteArray();

        String hexActual = Hex.encode(actual);
        String hexExpected = Hex.encode(expectedBytes);
        assertThat(hexActual, is(hexExpected));
    }
}
