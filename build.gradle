import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java-library'
    id 'io.freefair.lombok' version "${lombokPluginVersion}"
    id 'jacoco'
    id 'signing'
    id 'maven-publish'
    id('io.github.gradle-nexus.publish-plugin') version '1.1.0'
}

apply plugin: 'java'

group = 'network.casper'
// Version number update for release
version='2.5.6'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
    implementation "dev.oak3:sbs4j:${sbs4jVersion}"
    implementation "io.github.oak:jsonrpc4j:${jsonrpc4jVersion}"
    implementation "org.bouncycastle:bcpkix-jdk15on:${bouncyCastleVersion}"
    implementation "org.web3j:core:${web3jVersion}"
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "org.javatuples:javatuples:${javaTuplesVersion}"
    implementation "joda-time:joda-time:${jodaTimeVersion}"
    implementation "org.apache.cxf:cxf-rt-rs-client:${cxfRtRsSseVersion}"
    implementation "org.apache.cxf:cxf-rt-rs-sse:${cxfRtRsSseVersion}"

    // log4j and slf4j
    compileOnly "org.slf4j:slf4j-api:${slf4jApiVersion}"
    testImplementation "commons-io:commons-io:${commonsIoVersion}"
    testImplementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    testImplementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    testImplementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
    testImplementation "com.jayway.jsonpath:json-path-assert:${jsonPathAssertVersion}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${mockwebserverVersion}"

    // Use JUnit Jupiter for testing.
    testImplementation "org.junit.jupiter:junit-jupiter:${jupiterVersion}"
    // Used to compare json strings while testing
    testImplementation "org.skyscreamer:jsonassert:${jsonassertVersion}"
}

java {
    withJavadocJar()
    withSourcesJar()
}

task casperJar(type: Jar) {
    archiveBaseName = 'casper-java-sdk'
    archiveVersion = "${version}"
    from { configurations.compileClasspath.findAll { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

nexusPublishing {
    repositories {
        sonatype {  //only for users registered in Sonatype after 24 Feb 2021
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username.set(System.getenv('MAVEN_USERNAME'))
            password.set(System.getenv('MAVEN_PASSWORD'))
        }
    }
}

test {
    finalizedBy jacocoTestReport

    useJUnitPlatform()
    testLogging {
        //showStandardStreams true
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
               TestLogEvent.PASSED,
               TestLogEvent.SKIPPED
               //TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        //showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                   TestLogEvent.FAILED,
                   TestLogEvent.PASSED,
                   TestLogEvent.SKIPPED,
                   TestLogEvent.STANDARD_ERROR
                   TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        //info.events = debug.events
        //info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

jacocoTestReport {
    dependsOn test

    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/exception/**')
        })
    }
}

publishing {
    repositories {
        maven {
            name = 'OSSRH'
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv('MAVEN_USERNAME')
                password = System.getenv('MAVEN_PASSWORD')
            }
        }
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/casper-network/casper-java-sdk"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            artifactId = 'casper-java-sdk'
            from components.java
            pom {
                name = 'Casper Java SDK'
                packaging = 'jar'
                description = 'SDK to streamline the 3rd party Java client integration processes. Such 3rd parties include exchanges & app developers.'
                url = 'https://github.com/casper-network/casper-java-sdk'

                scm {
                    connection = 'scm:git:https://github.com/casper-network/casper-java-sdk.git'
                    developerConnection = 'git@github.com:casper-network/casper-java-sdk.git'
                    url = 'https://github.com/casper-network/casper-java-sdk'
                }

                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/casper-network/casper-java-sdk/issues'
                }

                ciManagement {
                    system = 'Github Actions'
                    url = 'https://github.com/casper-network/casper-java-sdk/actions'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'oak'
                        name = 'Alexandre Carvalho'
                        email = 'adcarvalho@gmail.com'
                    }
                    developer {
                        id = 'ab3rtz'
                        name = 'Andre Bertolace'
                        email = 'andre@syntifi.com'
                    }
                    developer {
                        id = 'meywood'
                        name = 'Ian Mills'
                        email = 'ian@meywood.com'
                    }
                    developer {
                        id = 'stormeye'
                        name = 'Carl Norburn'
                        email = 'carl@stormeye.co.uk'
                    }
                }
            }
        }
    }

    jar {
        archiveClassifier = ''
    }

    // Reference at https://docs.gradle.org/current/userguide/signing_plugin.html#sec:in-memory-keys
    signing {
        def signingKey = System.getenv('GPG_SIGNING_KEY') ?: findProperty('GPG_SIGNING_KEY')
        def signingKeyPassword = System.getenv('GPG_SIGNING_KEY_PASSWORD') ?: findProperty('GPG_SIGNING_KEY_PASSWORD')

        useInMemoryPgpKeys(signingKey, signingKeyPassword)
        sign publishing.publications.mavenJava
    }
}
