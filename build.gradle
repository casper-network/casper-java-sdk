plugins {
    id 'java-library'
    id 'maven-publish'
}

apply plugin: 'java'
group = 'network.casper'

repositories {
    mavenCentral()
}


dependencies {
    testImplementation 'commons-io:commons-io:2.8.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.3.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    testImplementation group: 'com.jayway.jsonpath', name: 'json-path-assert', version: '2.6.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.0.1'

    implementation group: 'com.rfksystems', name: 'blake2b', version: '1.0.0'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.5'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.12.2'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.2'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.12.2'
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.69'
    implementation group: 'com.sshtools', name: 'maverick-synergy', version: '3.0.0-RC8'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
}

ext {
//   isReleaseVersion = !version.endsWith("SNAPSHOT")
   isReleaseVersion = false
}

def getUserName(){
    def Properties props = new Properties()
    props.load(new FileInputStream(new File('secrets.properties')))
    return props['OSSRH_USERNAME']
}
def getPassword(){
    def Properties props = new Properties()
    props.load(new FileInputStream(new File('secrets.properties')))
    return props['OSSRH_PASSWORD']
}

publishing {

    repositories {
        maven {
            def releaseRepo = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releaseRepo : snapshotRepo
            version = "0.0.1-SNAPSHOT"
            credentials {
//                username = project.hasProperty('OSSRH_USERNAME') ? ossrhUsername : "Unknown user"
//                password = project.hasProperty('OSSRH_PASSWORD') ? ossrhPassword : "Unknown password"
                username = getUserName()
                password = getPassword()
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            pom {
                groupId = 'network.casper'
                name = 'casper-java-sdk'
                description = 'Casper Java SDK'
                from components.java
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:casper-network/java-sdk.git'
                    developerConnection = 'scm:git:git@github.com:casper-network/java-sdk.git'
                    url = 'https://github.com/casper-network/java-sdk'
                }
            }
        }
    }

//    repositories {
//        maven {
//            name = "GitHubPackages"
//            url = uri("https://maven.pkg.github.com/casper-network/casper-java-sdk")
//            version = "0.0.1"
//            credentials {
//                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
//                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
//            }
//        }
//    }
//    publications {
//        gpr(MavenPublication) {
//            from(components.java)
//        }
//    }
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.casper.sdk.controller.CasperSdk'
        )
    }
}

task casperJar(type: Jar) {
    archiveBaseName = 'casper-java-sdk'
    archiveVersion =  '0.5.0'
    manifest {
        attributes 'Main-Class': 'com.casper.sdk.controller.CasperSdk'
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

test {
    useJUnitPlatform()
}
